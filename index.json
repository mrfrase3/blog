[{"content":"this is a test\nthis.is(\u0026#39;some\u0026#39;, example[\u0026#34;code\u0026#34;]); can it also do inline code?\nhere\u0026rsquo;s a duck\n rubber duck   ","permalink":"https://3mr.fr/notes/test-note/","summary":"this is a test\nthis.is(\u0026#39;some\u0026#39;, example[\u0026#34;code\u0026#34;]); can it also do inline code?\nhere\u0026rsquo;s a duck\n rubber duck   ","title":"Test Note"},{"content":"A-Blocks is a block-based coding interface that allows children to program 3D and VR applications.\nThis project was undertaken for my honours thesis at UWA.\nThe project code can be found here\n","permalink":"https://3mr.fr/projects/a-blocks/","summary":"A block-based coding interface that allows children to program 3D and VR applications.","title":"[old] A-Blocks"},{"content":"Chromeduino is a coding interface made for ChromeOS. The project was originally created by Casey Halverson (Spaceneedle) and was lacking in terms of features and stability. As this application is the only free option for coding Arduinos with ChromeOS, there is a need for such a tool in classrooms, where all the students have educational Chromebooks but the teacher/school does not have the resources to pay for the other editors.\nThis project involved taking the existing codebase and drastically modifying it to add in the necessary features to make the coding interface useful. The application used a remote compiling server to translate the written code into the binaries to be flashed to the Arduinos. Unfortunately, the code for the original compile server was lost, so a new server also had to be created from scratch using Node.js.\nThe new version of the application can be found here. The GitHub can be found here.\n","permalink":"https://3mr.fr/projects/chromeduino/","summary":"A Chrome App which uses the serial API on the chrome browser to program AVR Arduinos with a serial bootloader that is avrdude compatible (Arduino Uno, Mega, etc)","title":"[superseded] Chromeduino"},{"content":"This application provided a way for CoderDojo mentors to provide assistance to kids learning to code in remote and rural communities.\nIt uses WebRTC to allow a child to have a call with the mentor where they can do things like send messages, code snippets, and share their screen. Importantly, this application did not have support for the child to share their webcam, for privacy reasons.\nChildren requiring help would join a queue, and the mentors would see this and accept the calls and help accordingly.\nThis was a project as a part of the professional computing unit at UWA, the project continued after the unit was completed.\nThe project code can be found here\n","permalink":"https://3mr.fr/projects/remote-dojo/","summary":"A chatting application that allows children in remote regions to access CoderDojo Mentors.","title":"[old] RemoteDojo 3.0"},{"content":"This server uses a-painter\u0026rsquo;s main repo, except instead of using a cli webpack server, it hosts its own express server with webpack implemented and then runs a socket.io server on top. It also injects the multiplayer layer into the client application.\nThis serves as a basic example and the method can easily be modified to support different communication types, like mongo, firebase, webRTC, etc\u0026hellip;\nThe project code can be found here\n","permalink":"https://3mr.fr/projects/multiplayer-painting/","summary":"A socket based multiplayer server example for a-painter, a WebVR painting application.","title":"[old] Multiplayer Painting"},{"content":"Having looked at other peoples projects of LED matrix screens, I have always wanted to make one. The only problem was that I did not have a compelling project to force me to do it until a few months ago where a mate of mine, Alex, showed me a tix clock and I was instantly hooked.\nThe concept is pretty simple, the clock is in 24 hour time with each section correlating to a digit. You can tell the time by counting how many lights are on in each section. The above clock is showing that it is 12:34.\nThere is no defined order that the lights need to be on, and to add flare you can make it change to a random pattern every few seconds to throw someone off. \u0026gt;:)\nMy first attempt\u0026hellip;. \u0026hellip;.. worked\u0026hellip;\nUsing static colored LEDs and half a ton of jumper leads, I cobbled together a rats nest of a clock. The lot was controlled with an Arduino Uno with a RTC clock. With 27 LEDs in total, an issue occurred where there are only 14 digital pins, 12 usable and 27 LEDs.\nFortunately because it was a matrix (3 rows, 9 columns, 12 pins) there were just enough pins to multiplex without the use of an external IC. Multiplexing is where the Arduino (or an IC) would cycle through each row, lighting one at a time, every tick. This happens at a speed that looked as though all the LEDs were a solid colour.\nAt this point, the next step was cleaning up the mess, and using static LEDs, the only way to do this was to get a PCB made and I procrastinated.\nThen I got addressable LEDs.\nWS2812 Strip LEDs make adding colourful pretty light displays to anything a breeze. They work by one LED will take a new command, execute it (change colour) and then pass the old command to the next LED in line. This is made even easier by all the heavily supported libraries for programming with them.\nOne thing to keep in mind with strip LEDs is that they draw a fair bit of power, and thus generate a lot of heat. It\u0026rsquo;s usually best to attach them to a surface that will disparate the heat well.\nWith a piece of random metal sheet as the backing heat sink, a bit of soldering and some slight edits to the original code, I had a working model which worked flawlessly.\nTo wrap up the project, I soldered the connections to a Arduino Pro Micro (smaller and cheaper) and used our Labs new laser cutter to fashion a nice box out of MDF and acrylic to put it all in.\nMoving forward, I would like to make a PCB with everything on it, and make a few for family and friends. But for now I can call this project complete, and it looks pretty cool.\nCredit to Alex for working on this project with me.\n","permalink":"https://3mr.fr/blog/making-a-tix-clock/","summary":"Having looked at other peoples projects of LED matrix screens, I have always wanted to make one. The only problem was that I did not have a compelling project to force me to do it until a few months ago where a mate of mine, Alex, showed me a tix clock and I was instantly hooked.\nThe concept is pretty simple, the clock is in 24 hour time with each section correlating to a digit.","title":"Making a Tix Clock"},{"content":"Check out what I\u0026rsquo;m talking about.\nRecently I\u0026rsquo;ve been playing around with the Web Audio API more specifically using it for visualisers.\nOne of the main reasons this API exists is to make visualisers for audio, but for some reason, you don\u0026rsquo;t see this very much on the internet. Why is something that is beyond me, but in the mean time, I\u0026rsquo;m having fun with it.\nAnother API that\u0026rsquo;s been around is matter js, a physics engine written in js for browsers. This library came up in a search (for something to populate a DOM with cats) a long time back, and I thought it was cool, but could not find a project for it.\nFast forward to a few weeks ago, I had the cool thought of having small objects falling towards a central circle, and then the music playing flinging them away. This bugged me to the point that I sat down and started to write the code.\nI initially thought of writing the physics myself, but then remembered that vector acceleration, relativity and collision calculations are a headache, and quickly switched to matter where the work was already done.\nThe main issue I had with the matter library was the plugins. Only three exist as far as I am aware, all depend on each other, and I needed all of them. This normally isn\u0026rsquo;t an issue, but the documentation for adding them together is very vague and the implementation of the plugin system is very new, so not a lot of people have complained on their issue tracker yet. The examples they have on their website is also written in a way that\u0026rsquo;s not really for coders.\nAfter a bit of trial and error, I got the system setup, using the three plugins that added per-object gravity, and a border that will make an object disappear and reappear on the other side.\nI wrote a time loop that checks the audio levels from the audio stream, calculates the average, plays around with maths, makes it negative and then redefines the centre circle\u0026rsquo;s gravity. If the audio levels spike, so does the gravity and the objects go flying.\nThis produced a nice effect, but the objects were too sporadic, especially when the audio levels were neutral so there was no gravity pull. The solution was to add a second circle, identical to the first, but with a fixed gravity. Now the original circle pushes against the constant gravity of the other. This keeps the flying objects centralised.\nAdding air friction to the flying objects also helped calm them down, especially when there were large gravity spikes, launching them at the speed of sound into one direction.\nFrom there on, it was just a case of tweaking the calculations to try to produce a smoother finish.\nThe end result was a nice little one page thing that is cool to show off to people. I might in the future look at increasing it\u0026rsquo;s responsiveness and giving control over the music.\n","permalink":"https://3mr.fr/blog/visualising-gravity/","summary":"Check out what I\u0026rsquo;m talking about.\nRecently I\u0026rsquo;ve been playing around with the Web Audio API more specifically using it for visualisers.\nOne of the main reasons this API exists is to make visualisers for audio, but for some reason, you don\u0026rsquo;t see this very much on the internet. Why is something that is beyond me, but in the mean time, I\u0026rsquo;m having fun with it.\nAnother API that\u0026rsquo;s been around is matter js, a physics engine written in js for browsers.","title":"Visualising Gravity"}]